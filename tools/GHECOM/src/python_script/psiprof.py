##
## <psiprof.py>
##  dealing with PSI-BLAST ascii profile file (generated by '-Q' option)
##  
##>> FILE FORMAT EXAMPLE <<
#
#Last position-specific scoring matrix computed, weighted observed percentages rounded down, information per position, and relative weight of gapless real matches to pseudocounts
#           A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V   A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V
#    1 Q   -3 -2 -2 -2 -6  7  5 -4 -2 -5 -5 -1 -3 -6 -4 -2 -3 -5 -4 -5    0   0   0   0   0  59  40   0   0   0   0   0   0   0   0   0   0   0   0   0  1.55 1.06
#    2 I   -1 -5 -5 -5 -4 -2 -5 -5 -5  4  0 -5 -2 -3 -3  0 -1 -5 -4  5    4   0   0   0   0   1   0   0   0  27   8   0   0   0   1   8   4   0   0  48  0.91 1.20
#    3 Q   -1 -2 -1 -3 -5  7 -1 -5 -2 -3 -3  1  0 -5 -4 -3  0 -5 -4  3    4   0   2   0   0  51   1   0   0   0   1   8   2   0   0   0   6   0   0  23  0.99 1.24
#    4 L   -4 -2 -5 -6 -4 -4 -5 -6 -5 -1  5 -4  5 -2 -5 -5 -3 -2 -4  2    0   2   0   0   0   0   0   0   0   0  65   0  18   0   0   0   0   0   0  11  1.20 1.27
#    5 V   -2 -2 -3 -4 -4  4 -1 -5  0  0 -1 -2 -1 -4 -4 -2  5 -5 -4  2    1   2   0   0   0  19   3   0   2   5   4   2   1   0   0   0  43   0   0  16  0.78 1.32
#    6 Q   -3 -2 -2 -2 -6  8  4 -5 -2 -5 -5  0 -3 -6 -4 -1 -3 -5 -4 -3    0   0   1   0   0  68  22   0   0   0   0   2   0   0   0   3   0   0   0   2  1.58 1.34
#:
#  217 V    0  2 -3 -1 -4 -2  4 -4 -3  1 -3 -1 -3 -4 -4  0 -1 -5 -4  3    8  14   0   3   0   0  34   0   0  10   0   2   0   0   0   5   3   0   0  22  0.52 0.94
#  218 P    0 -2  1  3 -5 -3 -2 -4 -4 -4 -1 -3 -4 -5  7 -3 -3 -6 -5 -4    6   2   8  21   0   0   0   0   0   0   8   0   0   0  55   0   0   0   0   0  1.34 0.92
#  219 R   -3  7 -2 -3 -5  0 -1 -4 -2 -5 -4  5 -3 -5 -3 -2 -3 -5 -4 -4    0  65   0   0   0   0   0   0   0   0   0  35   0   0   0   0   0   0   0   0  1.37 0.71
#  
#                      K         Lambda
#Standard Ungapped    0.1287     0.3129
#Standard Gapped      0.0410     0.2670
#PSI Ungapped         0.1507     0.3179
#PSI Gapped           0.0461     0.2670


import sys
import os 

LastModDate = 'Sep 16, 2009'
   
class Profile:
  
  def __init__(self):
      self.filename = ''
      self.length   = 0
      self.qseq     = ['-'] # query sequence [1..length]
      self.pssm     = [{'A':0,'R':0,'N':0,'D':0,'C':0,'Q':0,'E':0,'G':0,'H':0,'I':0,'L':0,'K':0,'M':0,'F':0,'P':0,'S':0,'T':0,'W':0,'Y':0,'V':0}]
                       # score (Position specific score matrix)  [1..length][20]
      self.freq     = [{'A':0,'R':0,'N':0,'D':0,'C':0,'Q':0,'E':0,'G':0,'H':0,'I':0,'L':0,'K':0,'M':0,'F':0,'P':0,'S':0,'T':0,'W':0,'Y':0,'V':0}]
                       # frequency of amino acids [1..length][20]
      self.info     = [0.0] # information per position [1..length]
      self.weight   = [0.0] # relative weight [1..length]

 
  def read(self,fname):
      print "#psiprof.Profile.read(\"%s\") "%(fname)
      if not os.access(fname,os.R_OK):
        print "#ERROR:Can't open psi-blast profile '%s'" % fname
        sys.exit(1)
      f = open(fname)
      readon = 0 
      aalist = ['A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V'] 
      self.length = 0
      self.filename = fname
      nsite = 0 
      for line in f:
        if ((readon==1) and (len(line)<10)):
          readon  = 0
        if (readon==1):
          nsite += 1
          field = line.split()
          self.qseq.append(field[1])
          self.pssm.append({})
          self.freq.append({})
          for i in range(20):
            self.pssm[nsite][aalist[i]] = int(field[2+i])
          for i in range(20):
            self.freq[nsite][aalist[i]] = int(field[22+i])
          self.info.append(float(field[-2]))
          self.weight.append(float(field[-1]))
        if (line.startswith("           A  R  N  D  C  Q  E  G")==1):
          readon  = 1 
      self.length = nsite
      f.close()

  def __str__(self):
      s = "#Profile:'%s' length %d"%(self.filename,self.length)
      return s


def _main():
    if (len(sys.argv)<2):
      print "#ERROR:Insufficient arguments"
      sys.exit()
    P = Profile()
    P.read(sys.argv[1])
    print P
if __name__ == '__main__':_main()


