##
## <resacc.py>
##  dealing with residue-based solvent accessibility file 
##  
##>> FILE FORMAT EXAMPLE <<
#This file is generated by the 'LeeRich' program.
#The program 'LeeRich' is coded by Takeshi Kawabata (takawaba@is.naist.jp).
#COMMAND "LeeRich 4hhbA.pdb -ch A"
#DATE Sep 18,2008 11:13:20
#RadiusFile ""
#Rsolvent[A] 1.400000 deltaZ[A] 0.100000
#Pattern "A:xxx:xxx:x" Natom 1069 Nres 141
#ASAtotal 7796.04 A^2 FullASAtotal 130452.62 A^2
#Total  Natom 1069 Nres 141 ASA[A^2]  7796.0 R[%] C  66.4 O  17.7 N  15.8 Gsol +2.181
#COLUMN 1|RNUM    | Residue number
#COLUMN 2|ChainID | Chain Identifier
#COLUMN 3|Residue | Three-letter residue name
#COLUMN 4|Natm    | Number of Atoms in the residue
#COLUMN 5|ASA     | Solvent Accessible Surface of the residue [A^2]
#COLUMN 6|ACC     | ASA normalized by that of full exposed atoms [%]
#COLUMN 7|RACC    | ASA normalized by that of Gly-X-Gly structures [%]
#COLUMN 8|StdASA  | Solvent Accessible Surfarce of residue X in Gly-X-Gly [A^2]
#[RNUM][RES][Natm][ASA]   [ACC%]  [RACC%] [StdASA(AA)]


import sys
import os 

LastModDate = 'Sep 18, 2008'
  
class SolventAcc:
  
  def __init__(self):
      self.filename = ''   
      self.rnumlist    = []
      self.chain       = {} 
      self.res         = {} 
      self.Natom       = {} 
      self.ASA         = {} 
      self.ACC         = {} 
      self.RACC        = {} 
      self.StdASA      = {} 
    
  def read(self,fname):
      print "#resacc.SolventAcc.read(\"%s\") "%(fname)
      self.filename = fname
      f = open(fname)
      start_align = 0 
      for line in f: 
        if line:
          line = line.rstrip('\n')
        if (line.startswith("#")==0):
          field = line.split()
          rnum = field[0]
          self.rnumlist.append(rnum)
          self.chain[rnum]    = field[1]
          self.res[rnum]      = field[2]
          self.Natom[rnum]    = field[3]
          self.ASA[rnum]      = field[4]
          self.ACC[rnum]      = field[5]
          self.RACC[rnum]     = field[6]
          self.StdASA[rnum]   = field[7]
          #print rnum,line
      f.close

  def __str__(self):
      s = "#resacc.SolventAcc:'%s' "%(self.filename)
      return s  
  
 
def _main():
    if (len(sys.argv)<2):
      print "#ERROR:Insufficient arguments"
      sys.exit()
    S = SolventAcc()   
    S.read(sys.argv[1]) 
    print S 
    for rnum in (S.rnumlist):
      print "'%s' ASA %s RACC %s"%(rnum, S.ASA[rnum],S.RACC[rnum])
if __name__ == '__main__':_main()
